#define FCY 4000000UL
#include <xc.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <libpic30.h>
#include "lcd.h"

/* ----------------------------------------------------------------
 *  Bit settings (internal FRC 8 MHz ‑> Fcy 4 MHz)
 * ----------------------------------------------------------------*/
#pragma config POSCMOD = NONE, FNOSC = FRC
#pragma config FCKSM   = CSDCMD, IESO = OFF, OSCIOFNC = OFF
#pragma config WDTPS   = PS32768, FWPSA = PR128, FWDTEN = OFF, WINDIS = ON
#pragma config ICS     = PGx2, GWRP = OFF,  GCP = OFF,  JTAGEN = OFF

#ifndef SYSTEM_PERIPHERAL_CLOCK
#define SYSTEM_PERIPHERAL_CLOCK FCY
#endif

/* ---------------- Pin definitions ---------------- */
#define BTN_P1   PORTDbits.RD6   // przycisk gracza 1 (aktywne 0)
#define BTN_P2   PORTDbits.RD13  // przycisk gracza 2 (aktywne 0)
#define POT_CH   5               // RB5 / AN5

/* ---------------- Debounce ------------------------*/
#define DEBOUNCE_US 5000         // 5 ms

/* --------------- Timer‑1 (1 s) --------------------*/
#define T1_PS   0b11             // 1:256 prescaler
#define T1_PR   15624            // (4 MHz / 256) – 1 = 15624

/* ------------- Global state ----------------------*/
static volatile uint32_t timeP1 = 0;   // seconds
static volatile uint32_t timeP2 = 0;
static volatile bool     activeP1 = true; // kto odmierza
static volatile bool     running  = false; // czy partia trwa

static uint8_t prevP1 = 1, prevP2 = 1;    // detekcja zbocza

/* ------------- Prototypy -------------------------*/
static void initIO(void);
static void initADC(void);
static uint16_t readPot(void);
static void initTimer1(void);
static void readButtons(void);
static void formatTime(char *buf, uint32_t sec);
static void updateLCD(void);

/* -------------------------------------------------*/
static void initIO(void)
{
    AD1PCFG = 0xFFFF;
    AD1PCFGbits.PCFG5 = 0;           // RB5 analog
    TRISA = 0x0000;                  // LED / LCD pins -> output
    TRISD |= (1u<<6) | (1u<<13);     // RD6, RD13 inputs
}

static void initADC(void)
{
    AD1CON1 = 0;
    AD1CON2 = 0;
    AD1CON3 = 0x1F02;                // 31 TAD, prescaler 2
    AD1CHS  = POT_CH;                // AN5 channel
    AD1CON1bits.ADON = 1;
}

static uint16_t readPot(void)
{
    AD1CON1bits.SAMP = 1;
    __delay_us(10);
    AD1CON1bits.SAMP = 0;
    while(!AD1CON1bits.DONE);
    return ADC1BUF0 & 0x03FF;        // 10‑bit value 0‑1023
}

static void initTimer1(void)
{
    T1CON = 0;
    T1CONbits.TCKPS = T1_PS;
    PR1 = T1_PR;
    _T1IF = 0;
    _T1IP = 2;
    _T1IE = 1;
    T1CONbits.TON = 1;
}

/* ---------------- Timer‑1 ISR --------------------*/
void __attribute__((interrupt, no_auto_psv)) _T1Interrupt(void)
{
    if (running) {
        if (activeP1) {
            if (timeP1) timeP1--;    // dekrementuj aktywny czas
        } else {
            if (timeP2) timeP2--;
        }
        if (timeP1 == 0 || timeP2 == 0) {
            running = false;        // koniec gry – ktoś przekroczył czas
        }
    }
    _T1IF = 0;
}

/* ---------------- Buttons ------------------------*/
static void readButtons(void)
{
    // Przyciski aktywne w stanie niskim
    if (prevP1 && !BTN_P1) {
        __delay_us(DEBOUNCE_US);
        if (prevP1 && !BTN_P1) {
            if (!running) {
                // Start gry – ustawia Gracza 1 jako aktywnego
                running = true; activeP1 = true;
            } else if (running && activeP1) {
                // Zmiana tury tylko gdy przycisk swojego czasu
                activeP1 = false;
            }
        }
    }
    prevP1 = BTN_P1;

    if (prevP2 && !BTN_P2) {
        __delay_us(DEBOUNCE_US);
        if (prevP2 && !BTN_P2) {
            if (!running) {
                running = true; activeP1 = false;
            } else if (running && !activeP1) {
                activeP1 = true;
            }
        }
    }
    prevP2 = BTN_P2;
}

/* ---------------- Time formatting ---------------*/
static void formatTime(char *buf, uint32_t sec)
{
    uint16_t m = sec / 60;
    uint16_t s = sec % 60;
    sprintf(buf, "%02u:%02u", m, s);
}

/* ---------------- LCD update --------------------*/
static void updateLCD(void)
{
    static uint32_t lastP1 = 0xFFFFFFFF, lastP2 = 0xFFFFFFFF;
    static bool lastRun = false, lastActiveP1 = false;

    if (timeP1==lastP1 && timeP2==lastP2 && running==lastRun && activeP1==lastActiveP1)
        return; // brak zmian

    lastP1 = timeP1; lastP2 = timeP2; lastRun = running; lastActiveP1 = activeP1;

    char buf[6];
    LCD_ClearScreen();
    formatTime(buf, timeP1);
    LCD_PutString("P1:",3); LCD_PutString(buf,5);
    if (activeP1 && running) LCD_PutString(" <",2);

    LCD_PutString("\n",1);
    formatTime(buf, timeP2);
    LCD_PutString("P2:",3); LCD_PutString(buf,5);
    if (!activeP1 && running) LCD_PutString(" <",2);

    if (!running) {
        if (timeP1==0 && timeP2>0)
            LCD_PutString("\nP1 przegrał czas",17);
        else if (timeP2==0 && timeP1>0)
            LCD_PutString("\nP2 przegrał czas",17);
        else
            LCD_PutString("\nPauza",6);
    }
}

/* ---------------- main --------------------------*/
int main(void)
{
    initIO();
    initADC();

    // Ustaw czas z potencjometru (1,3,5 min) raz na starcie
    uint16_t pot = readPot();
    uint32_t startSec = 60;          // default 1 min
    if (pot < 341)        startSec = 60;     // 0‑340 -> 1 min
    else if (pot < 682)   startSec = 180;    // 341‑681 -> 3 min
    else                  startSec = 300;    // 682‑1023 -> 5 min

    timeP1 = timeP2 = startSec;

    LCD_Initialize();
    updateLCD();

    initTimer1();

    uint8_t lcdCtr = 0; // 10 ms tick counter

    while(1) {
        readButtons();

        if (++lcdCtr >= 20) { // co 200 ms
            updateLCD();
            lcdCtr = 0;
        }

        __delay_ms(10);
    }
}
